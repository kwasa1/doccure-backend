# Generated by Django 4.1.3 on 2022-11-13 10:01

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('type', models.CharField(choices=[('DOCTOR', 'Doctor'), ('PATIENT', 'Patient'), ('ADMIN', 'Administrator'), ('PHARMACIST', 'Pharmacist'), ('CLINICIAN', 'Clinician')], default='PATIENT', max_length=50, verbose_name='Account Type')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='account/')),
                ('title', models.CharField(blank=True, max_length=50, null=True, verbose_name='title ie Mr. Dr. MD. etc')),
                ('uid', models.CharField(editable=False, max_length=12, unique=True)),
                ('phone', models.IntegerField(blank=True, null=True, verbose_name='Phone Number')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('C', 'Custom')], default='C', max_length=1, verbose_name='Gender')),
                ('birth_year', models.DateField(default=datetime.datetime.now)),
                ('speciality', models.CharField(blank=True, max_length=100, null=True, verbose_name='MBBS, MS-General Surgery')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Lithuli Avenue BS3 113, Nairobi Kenya')),
                ('pricing', models.DecimalField(decimal_places=2, default=10.0, max_digits=8, verbose_name='$10 / session (2.5 hours)')),
                ('availability', models.CharField(choices=[('8 AM - 12 NOON WEEKDAYS', '8 AM - 12 NOON WEEKDAYS'), ('12 NOON - 5 PM NOON WEEKDAYS', '12 NOON - 5 PM NOON WEEKDAYS'), ('8 PM - 10 PM NOON WEEKDAYS', '8 PM - 10 PM NOON WEEKDAYS'), ('8 AM - 12 NOON WEEKENDS', '8 AM - 12 NOON WEEKENDS')], max_length=50, null=True, verbose_name='Working Hours')),
                ('area', models.CharField(blank=True, choices=[('UROLOGY', 'Urology'), ('NEUROLOGY', 'Neurology'), ('DENTIST', 'Dentist'), ('ORTHOPEDIC', 'Orthopedic'), ('CARDIOLOGY', 'Cardiology')], default='UROLOGY', max_length=100, null=True, verbose_name='Area of Specialization')),
                ('area_icon', models.ImageField(blank=True, null=True, upload_to='area/specialization/icons/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Clinician',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.customuser',),
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.customuser',),
        ),
        migrations.CreateModel(
            name='Female',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.profile',),
        ),
        migrations.CreateModel(
            name='Male',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.profile',),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.customuser',),
        ),
        migrations.CreateModel(
            name='Pharmacist',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Pharmacists',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.customuser',),
        ),
    ]
